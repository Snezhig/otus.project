version: '3.7'

services:
  php:
    container_name: ${COMPOSE_PROJECT_NAME}_php
    build: ./.docker/images/php
    volumes:
      - ./:/var/www
      - ./.docker/images/php/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/zz-docker.conf
      - socket:/sock
    working_dir: /var/www
    networks:
      - app-network
    links:
      - db
      - rabbit
      - mailhog
    environment:
      XDEBUG_CONFIG: client_host=${XDEBUG_CLIENT_HOST} client_port=${XDEBUG_CLIENT_PORT} remote_enable=1

  nginx:
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    image: nginx:latest
    ports:
      - "${INTERFACE:-127.0.0.1}:80:80"
    links:
      - php
    volumes:
      - ./:/var/www
      - ./.docker/images/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./.docker/images/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./.docker/images/nginx/sites:/etc/nginx/sites-available
      - socket:/sock
    working_dir: /var/www
    networks:
      - app-network
  db:
    container_name: ${COMPOSE_PROJECT_NAME}_db
    image: postgres
    command: [
        "postgres",
        "-c", "random_page_cost=1.1",
        "-c", "default_statistics_target=100",
        "-c", "effective_io_concurrency=200",
        "-c", "shared_buffers=500MB",
        "-c", "work_mem=32MB",
        "-c", "maintenance_work_mem=1GB",
        "-c", "effective_cache_size=11GB",
        "-c", "max_worker_processes=14",
        "-c", "max_parallel_workers_per_gather=4",
        "-c", "max_parallel_workers=14",
        "-c", "max_parallel_maintenance_workers=4",
    ]
    networks:
      - app-network
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE}
    volumes:
      - ./.data/.db/postgres:/var/lib/postgresql/data
    ports:
      - "${INTERFACE:-127.0.0.1}:${DB_PORT}:5432"

  mailhog:
    container_name: ${COMPOSE_PROJECT_NAME}_mailhog
    image: mailhog/mailhog
    ports:
      - "${INTERFACE:-127.0.0.1}:3025:1025" # smtp server
      - "${INTERFACE:-127.0.0.1}:8025:8025" # web ui
    networks:
      - app-network

  rabbit:
    container_name: ${COMPOSE_PROJECT_NAME}_rabbitmq
    image: rabbitmq:3-management
    networks:
      - app-network
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_MQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_MQ_PASSWORD}
    ports:
      - "${INTERFACE:-127.0.0.1}:${RABBIT_MQ_UI_PORT}:15672"

  redis:
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    image: 'redis:alpine'
    ports:
      - '${INTERFACE:-127.0.0.1}:${REDIS_PORT:-6379}:6379'
    volumes:
      - './.data/redis:/data'
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]

  prometheus:
    image: prom/prometheus:v2.28.1
    container_name: ${COMPOSE_PROJECT_NAME}_prometheus
    user: root
    volumes:
      - ./.docker/images/prometheus:/etc/prometheus
      - ./.data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - '${INTERFACE:-127.0.0.1}:${PROMETHEUS_PORT:-9090}:9090'
    networks:
      - app-network
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana:8.0.4
    container_name: grafana
    user: root
    volumes:
      - ./.data/grafana:/var/lib/grafana
      - ./.docker/images/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./.docker/images/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    ports:
      - '${INTERFACE:-127.0.0.1}:${GRAFANA_PORT:-3000}:3000'
    networks:
      - app-network
    labels:
      org.label-schema.group: "monitoring"

volumes:
  socket:
    driver: local

networks:
  app-network:
    driver: bridge


